name: POI CICD

env:
  poi_path: apis/poi/**
  docker_path: apis/poi/web
  staging_url: https://openhackgoa9se38poi-staging.azurewebsites.net
  prod_url: https://openhackgoa9se38poi.azurewebsites.net
  resource_group: openhackgoa9se38rg
  webapp_name: openhackgoa9se38poi
  build_name: POI
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  registry: openhackgoa9se38acr.azurecr.io
  repository: poi-api-dotnet 

on:
  push:
    branches: [ master ]
    paths:
      - apis/poi/**
      - .github/workflows/poi.yml
  pull_request:
    branches: [ master ]
    paths:
      - apis/poi/**
      - .github/workflows/poi.yml

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.1'

      - name: Add code coverage tools
        working-directory: apis/poi/tests/UnitTests
        run: dotnet add package coverlet.msbuild

      - name: Install dependencies
        run:  dotnet restore apis/poi/web/*.csproj

      - name: .NET Build web
        run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj

      - name: .NET Build unit tests
        run:  dotnet build --configuration Release --no-restore apis/poi/tests/UnitTests/UnitTests.csproj

      - name: .NET test
        run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov

      

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
          base-path: apis/poi
          flag-name: Unit

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });

  docker_build_and_push:
      if: github.ref == 'refs/heads/master'
      runs-on: ubuntu-latest
      needs: build_and_test
      steps:     
      - uses: actions/checkout@v2  
        
      - run: docker login ${{ env.registry }} -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            
      - run: |
          docker build '${{ env.docker_path }}' -t '${{ env.registry }}/${{ env.repository }}:${{ github.sha }}'
          docker push ${{ env.registry }}/${{ env.repository }}:${{ github.sha }}

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });

  
  deploy_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets. Azure_CREDENTIALS }}  

      - name: Azure web app
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{ env.webapp_name }}'
          publish-profile: ${{ secrets.AZUREWEBAPPPUBLISHPROFILESTAGING }}
          images: '${{ env.registry }}/${{ env.repository }}:${{ github.sha }}'
          slot-name: staging

      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });
            
  validate_staging:
    if: github.ref =='refs/heads/master'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
    - uses: actions/checkout@v2

    - name: "Set expected Validation Tag"
      run:  sed -i 's/<--tag-->/${{ github.run_number }} /g' apis/poi/webvalidate/validate.json

    - name: Build validation Container
      run:  docker build -t poivalidate apis/poi/webvalidate/validate.json

    - name: Web Validate
      run:  ./run.sh poivalidate $staging.url

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  swap_slots:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: validate_staging
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  validate_production:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: swap_slots
    steps:
    - uses: actions/checkout@v2

    - name: "Set Expected Validation Tag"
      run: sed -i 's/<--tag-->/${{github.run_number}}/g' apis/poi/webvalidate/validate.json

    - name: Build Validation Container
      run: docker build -t poivalidate apis/poi/webvalidate

    - name: Web Validate 
      run: ./run.sh poivalidate $prod_url   

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  roll_back:
    if: failure()
    runs-on: ubuntu-latest
    needs: validate_production
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap production and staging
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production 
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
       


       
 

      

